pipeline {
  agent any
  options { ansiColor('xterm'); timestamps() }
  environment {
    MAVEN_OPTS = "-Xmx1g"
    BASE_URL = credentials('qa-base-url') // optional Jenkins credential id
  }
  stages {
    stage('Checkout') {
      steps { checkout scm }
    }
    stage('Build & Unit') {
      steps { sh 'mvn -q -DskipTests install' }
    }
    stage('SAST (Semgrep)') {
      when { expression { return fileExists('.semgrep.yml') } }
      steps { sh 'semgrep ci || true' } // non-blocking example
    }
    stage('SCA (OWASP Dependency-Check)') {
      steps { sh 'mvn -q org.owasp:dependency-check-maven:check || true' }
    }
    stage('API/UI Smoke (PR Gate)') {
      steps { sh 'mvn -q -Psmoke -pl api-tests,ui-tests test' }
      post { always { junit allowEmptyResults: true, testResults: '**/surefire-reports/*.xml' } }
    }
    stage('Contract (Pact)') {
      steps { sh 'mvn -q -pl api-tests -Dpact.verifier.publishResults=false test -Dgroups=contract || true' }
    }
    stage('E2E (Staging)') {
      steps { sh 'mvn -q -Pregression -pl e2e-tests test' }
      post { always { junit allowEmptyResults: true, testResults: '**/surefire-reports/*.xml' } }
    }
    stage('Perf (k6)') {
      when { expression { return fileExists('perf-tests/scripts/ingest.k6.js') } }
      steps { sh 'cd perf-tests && k6 run scripts/ingest.k6.js || true' }
    }
    stage('Allure Report') {
      steps { sh 'mvn -q io.qameta.allure:allure-maven:report || true' }
      post { always { archiveArtifacts artifacts: '**/allure-results/**', allowEmptyArchive: true } }
    }
  }
  post {
    always {
      archiveArtifacts artifacts: '**/target/surefire-reports/**', allowEmptyArchive: true
    }
  }
}


“מכניס אבטחה לקומיט: SAST (Semgrep),
SCA (OWASP Dependency-Check), סריקת סודות (gitleaks),
IaC (Checkov). ב-staging מריץ ZAP Baseline נגד ה-UI ו-auth flows.
 לכל PR יש quality gate; כשל → חסימת merge. תרחישי הרשאות/privilege escalation
 נבדקים באוטומציה (role matrix).”
